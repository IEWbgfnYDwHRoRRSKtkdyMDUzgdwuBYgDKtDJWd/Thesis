
/* given an orthoPhrase, returns all possible orthoPhrases it could be misheard as*/
vector<string> discoverOronymsForPhrase( string origOrthoPhrase ) {
   vector<string> orthoMisheardAsPhrases;
   
   vector<vector<phone> > allPhoneSeqsOfOrigPhrase = findAllPhoneSeqsForOrthoPhrase( origOrthoPhrase );
   
   int numUniquePhoneticInterpretations = allPhoneSeqsOfOrigPhrase.size();
   for(int i = 0; i < numUniquePhoneticInterpretations; i++) {
      vector<phone> curPhoneSeq( allPhoneSeqsOfOrigPhrase.at(i) );
      string strOfCurPhoneSeq = phoneVectToString( curPhoneSeq );
      cerr << "Phonetic interpretation "<<i<<" ("<< strOfCurPhoneSeq <<")"<<endl;
      vector<string> altOrthoPhrases = interpretPhrase( curPhoneSeq );
      for( int j = 0; j < altOrthoPhrases.size(); j++) {
         cerr << i <<"~~>" << altOrthoPhrases.at(j) << endl;
         //TODO change so it only shows fully valid strings
         orthoMisheardAsPhrases.push_back( altOrthoPhrases.at(j) );
      }
   }
   //TODO deduplicate orthoMisheardAsPhrases   
   return orthoMisheardAsPhrases;
}
/*This function does the phoneme-tree-traversal thing for oronyms
   returns orthographic phrases (I *think* each string is a full phrase...)*/
vector<string> interpretPhrase( vector<phone> sampaPhraseOrig ) {
   vector<phone> sampaPhrase = getNoEmphsPhoneVect(sampaPhraseOrig);
	vector<string> misheardOrthoPhrases;
   //assert(0);
   cerr << "INTERPRET PHRASE for " << phoneVectToString(sampaPhrase) << endl;
	if( sampaPhrase.size() == 0 ) {
		misheardOrthoPhrases.push_back("");
		return misheardOrthoPhrases;
	}
	
   string sampaStr = "";
	vector <phone> usedPhones;
   
   for (int i = 0; i < sampaPhrase.size(); i++) {
      phone p = sampaPhrase[i];
      if( strcmp( "\"", p.c_str() ) == 0) {
         assert(0);
         continue; //TODO incorporate someday, but ignore emphases for now.
      } else if ( strcmp( "$", p.c_str() ) == 0) {
         assert(0);
         continue; //TODO incorporate someday, but ignore emphases for now.
      } else if ( strcmp( "%", p.c_str() ) == 0) {
         assert(0);
         continue; //TODO incorporate someday, but ignore emphases for now
      }
		sampaStr += p;
		usedPhones.push_back(p);
		vector<string> orthoMatches = queryDBwithSampaForOrthoStrs( sampaStr );
		//if there are no exact matches
      if ( orthoMatches.size() == 0 ) {
		   vector<string> prefixMatches = queryDBForOrthoStrsWithSampaPrefix( sampaStr );
		   //if there are no partial matches, we have a dead end, so exit
		   if( prefixMatches.size() == 0 ) {
			   misheardOrthoPhrases.push_back("DEADBEEF");
			   //TODO might have to delete rest of phone seq? we'll see.
            continue;
			} else {
			   continue; //go to next loop iter and add next phone 
			}
			//return misheardOrthoPhrases;
			cerr <<" OLD RETURN STATEMENT WAS HERE for if no exact matches"<< endl;
		}

      for (int j = 0; j < orthoMatches.size(); j++) {
         string orthoWord = orthoMatches[j];
			vector<phone> sampaPhraseTail( sampaPhrase.begin(), sampaPhrase.begin() + i );
			vector<string> orthoLeaves = interpretPhrase ( sampaPhraseTail );
			if ( orthoLeaves.size() == 0 ) {
			   if( sampaPhraseTail.size() > 0 ) {
				   cerr<< "--"<<orthoWord<<"---no leaves, has tail: "<< phoneVectToString(sampaPhraseTail) <<endl;
				   //TODO RESTART TRACE AT NEXT LINE!perhaps want a continue?
				   misheardOrthoPhrases.push_back( orthoWord.append( "DEADBEEF" ) );
				}
				//return misheardOrthoPhrases;
				cerr <<" OLD RETURN STATEMENT WAS HERE for if no ortholeaves"<< endl;
				continue;
			} else {
                        
            for (int k = 0; k < orthoLeaves.size(); k++) {
               string orthoLeaf = orthoLeaves[k];
					misheardOrthoPhrases.push_back( orthoWord + orthoLeaf );
				}
            
			}
		}
	}
	return misheardOrthoPhrases;
}
