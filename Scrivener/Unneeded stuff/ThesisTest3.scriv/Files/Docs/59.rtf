{\rtf1\ansi\ansicpg1252\cocoartf1138
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier-BoldOblique;\f5\fmodern\fcharset0 Courier-Oblique;
}
{\colortbl;\red255\green255\blue255;\red0\green128\blue128;\red255\green102\blue0;\red0\green0\blue255;
\red255\green0\blue0;\red204\green153\blue255;\red255\green204\blue0;}
\deftab720
\pard\pardeftab720\sl360\sb120\sa120\pardirnatural

\f0\b\fs28 \cf0 Final Phonetic Dictionary Choice\
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1\b0\fs24 \cf0 I used the UNISYN dictionary, using General American SAMPA output, as the base for my phonetic dictionary.  \
First, I downloaded the dictionary and related files from the UNISYN website.\
Once I\'92d extracted them, I attempted to run the provided perl scripts to turn the UNISYN phonetic symbols into SAMPA phonetic symbols, using the procedure specified in Section 6.1 of their Documentation1_3.pdf, and towncode \'93gam\'94.\
There were a few errors in translation I fixed manually:  \
\'91  d   \'92 instead of  \'91   4   \'92  \
\'91  5  \'92 instead of  \'91   l   \'92\
\'91  `r\\  \'92 instead of  \'91   r   \'91\
\'91   3   \'91 instead of \'91   3`   \'91\
In the case of the last one, I actually didn\'92t fix it, and just decided to use a modified sampa.  Similarly, with the second to last, I left the ` in, and ignored them as they came along during parsing.\
Here is the format for the raw fields, after I was done with fixing the UNISYN output:\
\pard\pardeftab720\sb120\sa120\pardirnatural\qc

\f2\fs20 \cf0 <
\f3\b \cf2 ortho
\f2\b0 \cf0 >:<
\f3\b \cf3 uniqueID
\f2\b0 \cf0 >:<
\f3\b \cf4 partOfSpeech
\f2\b0 \cf0 >:<
\f3\b \cf5 SAMPAspelling
\f2\b0 \cf0 >:<
\f3\b \cf6 extendedOrtho
\f2\b0 \cf0 >:<
\f3\b \cf7 freq
\f2\b0 \cf0 >\
Example:\
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural\qc

\f3\b\fs24 \cf2 transfer\cf0 :\cf3 2\cf0 :\cf4 VB/VBP\cf0 :\cf5  tr\{ns"f3`r \cf0 :\cf6 \{trans==fer\}\cf0 :\cf7 7184\cf0 \
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1\b0 \cf0 \
<
\f3\b \cf2 ortho
\f1\b0 \cf0 > is the regular spelling of the word\
<
\f3\b \cf3 uniqueID
\f1\b0 \cf0 > is a number (and optional string) used to differentiate homographs.\
<
\f3\b \cf4 partOfSpeech
\f1\b0 \cf0 > is used to identify the specific part of speech\
<
\f3\b \cf5 SAMPAspelling
\f1\b0 \cf0 > is the breakdown of the word, phonetically. It uses the SAMPA alphabet, and separators to show where breaks in the word are, and how they\'92re emphasized. If a separator is ' $ ', the following phones (until the next separator) are not emphasized.  If it's ' % ', then they are the secondary emphasis.  If it's ' " ', then they are the primary emphasis.\
<
\f3\b \cf6 extendedOrtho
\f1\b0 \cf0 > and <
\f3\b \cf7 freq
\f1\b0 \cf0 > have no particular use to me, at this time.  They are an alternate breakdown of the word's roots, and the frequency at which it occurs in language, according to UNISYN.\
\
My next step, to get these into the format that I need for my program , was to split up the fields into sub-fields to make them into a .csv (but using tabs as the field delimeter). I decided to do that like this (I'm using | as the field delimeter here, because it looks better, even though I'm using tabs for parsing)\
\
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural\qc

\f2 \cf0 <ortho> | : | <uniqID#> | <uniqIDString> | : | <partOfSpeech> | : | <extendedOrtho> | : | <freq> |  <FullSAMPAstring> | : | 
\f4\i\b syllableBreakdown
\f5\b0 (see below)...
\f2\i0  | '\\n' |\
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1 \cf0 \
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural

\f4\i\b \cf0 syllableBreakdown:\
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural\qc

\f2\i0\b0 \cf0 <charSeparator> | <sampaSyllableSubstring> \
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1 \cf0 \
\
The end of each word entry will be indicated with a newline.\
After I got the dictionary in this format, I opened it as a CSV in excel, inserted a column of commas between each field, a  column of ' ));' after the last field, and a column with with string \'93dict.add(Word(\'93 before the first field. \
This was my hack-y way of making constructors for all the words in my dictionary.  All I had to do was highlight the table, then copy and paste it as plain text into my code's dictionary constructor.}