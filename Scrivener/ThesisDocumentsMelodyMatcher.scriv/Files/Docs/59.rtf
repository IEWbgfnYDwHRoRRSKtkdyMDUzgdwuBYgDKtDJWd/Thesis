{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 TimesNewRomanPSMT;\f2\froman\fcharset0 BookAntiqua;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Bold;\f5\fmodern\fcharset0 Courier-BoldOblique;
\f6\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue128;\red255\green102\blue0;\red0\green0\blue255;
\red255\green0\blue0;\red204\green153\blue255;\red255\green204\blue0;}
\deftab720
\pard\pardeftab720\sl360\sb120\sa120\pardirnatural

\f0\b\fs28 \cf0 Final Phonetic Dictionary Choice\
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1\b0\fs24 \cf0 We used the UNISYN dictionary, using General American SAMPA output, as the base for our phonetic dictionary.  \
First, we downloaded the dictionary and related files from the UNISYN website.\
Once we\'92d extracted them, we attempted to run the provided perl scripts to turn the UNISYN meta-phonetic symbols into SAMPA phonetic symbols, using the procedure specified in Section 6.1 of UNISYN Documentation1_3.pdf, and the towncode \'93gam\'94 (which indicated that we want pronunciations using the General AMerican accent).\
There were a few errors in translation we fixed manually:  \
The translation script had erroneously substituted the character  \'91  d   \'92 instead of  the digit \'91   4   \'92 , which primarily affected the unique identifiers to disambiguate words and the word-frequency counts.  We did a simple search-and-replace to fix this, excluding the orthographic, extended orthographic, and SAMPA spellings.\
The translation script had erroneously substituted the digit \'91  5  \'92 instead of the character  \'91   
\f2 l
\f1    \'92 (lower case l).  This interfered with the phonetic/sampa spellings of the words. Fortunately, \'935\'94 is not a valid SAMPA phoneme or orthographic letter value, so we removed all instances of it from the ortho, SAMPAspelling, and extendedOrtho  columns\
The translation script had erroneously substituted the character sequence \'91  `r\\  \'92 instead of  \'91   `r   \'91. We were able to fix this by simply removing all \\ characters from our output.\
\
Here is the format for the raw fields, after we were done with fixing the UNISYN output:\
\pard\pardeftab720\sb120\sa120\pardirnatural\qc

\f3\fs20 \cf0 <
\f4\b \cf2 ortho
\f3\b0 \cf0 >:<
\f4\b \cf3 uniqueID
\f3\b0 \cf0 >:<
\f4\b \cf4 partOfSpeech
\f3\b0 \cf0 >:<
\f4\b \cf5 SAMPAspelling
\f3\b0 \cf0 >:<
\f4\b \cf6 extendedOrtho
\f3\b0 \cf0 >:<
\f4\b \cf7 freq
\f3\b0 \cf0 >\
Example:\
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural\qc

\f4\b\fs24 \cf2 transfer\cf0 :\cf3 2\cf0 :\cf4 VB/VBP\cf0 :\cf5  tr\{ns"f3`r \cf0 :\cf6 \{trans==fer\}\cf0 :\cf7 7184\cf0 \
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1\b0 \cf0 \
<
\f4\b \cf2 ortho
\f1\b0 \cf0 > is the regular spelling of the word\
<
\f4\b \cf3 uniqueID
\f1\b0 \cf0 > is a number (and optional string) used to differentiate homographs.\
<
\f4\b \cf4 partOfSpeech
\f1\b0 \cf0 > is used to identify the specific part of speech\
<
\f4\b \cf5 SAMPAspelling
\f1\b0 \cf0 > is the breakdown of the word, phonetically. It uses the SAMPA alphabet, and separators to show where breaks in the word are, and how they\'92re emphasized. If a separator is ' $ ', the following phones (until the next separator) are not emphasized.  If it's ' % ', then they are the secondary emphasis.  If it's ' " ', then they are the primary emphasis.\
<
\f4\b \cf6 extendedOrtho
\f1\b0 \cf0 > and <
\f4\b \cf7 freq
\f1\b0 \cf0 > have no particular use to me, at this time.  They are an alternate breakdown of the word's roots, and the frequency at which it occurs in language, according to UNISYN.\
\
My next step, to get these into the format that I need for my program , was to split up the fields into sub-fields to make them into a .csv (but using tabs as the field delimeter). I decided to do that like this (I'm using | as the field delimeter here, because it looks better, even though I'm using tabs for parsing)\
\
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural\qc

\f3 \cf0 <ortho> | : | <uniqID#> | <uniqIDString> | : | <partOfSpeech> | : | <extendedOrtho> | : | <freq> |  <FullSAMPAstring> | : | 
\f5\i\b syllableBreakdown
\f6\b0 (see below)...
\f3\i0  | '\\n' |\
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1 \cf0 \
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural

\f5\i\b \cf0 syllableBreakdown:\
\pard\pardeftab720\fi720\sb120\sa120\pardirnatural\qc

\f3\i0\b0 \cf0 <charSeparator> | <sampaSyllableSubstring> \
\pard\pardeftab720\fi630\sl360\sb60\sa60\pardirnatural

\f1 \cf0 \
\
The end of each word entry will be indicated with a newline.\
After I got the dictionary in this format, I opened it as a CSV in excel, inserted a column of commas between each field, a  column of ' ));' after the last field, and a column with with string \'93dict.add(Word(\'93 before the first field. \
This was my hack-y way of making constructors for all the words in my dictionary.  All I had to do was highlight the table, then copy and paste it as plain text into my code's dictionary constructor.}